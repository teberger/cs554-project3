\documentclass{article}
\usepackage{minted}
\usepackage{hyperref}
\usepackage{amsmath}
\usepackage[left=1in, right=1in]{geometry}

\begin{document}
\title{Project 2 Report}
\author{Taylor Berger, Zachary Friedland, Jianyu Yang}
\maketitle

\section{Language Decisions}
\paragraph{} Our group continued to use Python for the
ease of expressing high level concepts and removal of memory
management from the project. We also used Git for version control the
collaboration tools. The repository can be found at
\href{https://www.github.com/teberger/cs554-project2}{Taylor's Github}.

\paragraph{} We continued our use of PyParsing to read in the grammar 
rules defined in external files. 

\section{Data Structures for a Context Free Grammar}
\paragraph{}The complete defintions for our data structures can be 
found in section~\ref{code:cfg}. However, we will break them down in
the order presented in the project specification and outline the
reason they were created and the features implemented.

\subsection{Productions}
\paragraph{} The first data structure we implemented is a structures
for a grammar production. The implementation of the data structure is a
decorator for a pair of symbols. It simply groups the symbols together
into a left and right half. The right half is allowed to be a list 
of symbols whereas the left half must only be one symbol.

\begin{minted}[linenos=true]{python}
class Production:
    """ Represents a production. """

    def __init__(self, lhs, rhs):
        """
        :param str lhs: Left-hand-side symbol.
        :param list[str] rhs: List of right-hand-side symbols.
        """
        self.lhs = lhs
        self.rhs = rhs

#... property functions excluded for brevity ... 
\end{minted}
\label{exerpt:production}

\subsection{Grammar}
\paragraph{} A grammar object is the logical extension of having a
single production. In our implementation, grammars are a dictionary
of symbol to list of list of symbols. The nested list returned represents
all productions that can come from the non-terminal on the left hand side
of a production. Therefore if the set of productions looks like:
\begin{verbatim}
A -> aaa
A -> b
\end{verbatim}
Then, the resulting dictionary lookup for \verb_A_ would return the list \verb_['aaa','b']_. 
\paragraph{} When constructing the grammar, the first left hand side of a production encountered is considered the start symbol. So upon parsing and reading that symbol an internal pointer to the start symbol is maintained by the grammar object. The definition for the constructor of a grammar is as follows:

\begin{minted}[linenos=true]{python}
class Grammar:
    """ Data structure for context-free grammar. """

    def __init__(self, grammar=None):

        self.productions = dict()
        self.nonTerminals = set()
        self.start = ""

        if grammar is not None:
            # Convert ParseResult objects into Productions.
            parse = pyp_Grammar.parseFile(grammar)
            productions = [Production(p.lhs, p.rhs.asList()) for p in parse]

            # First production's left-hand-side is start symbol.
            self.start = productions[0].lhs

            # Hygiene checks.
            productions = Generating(productions)
            if self.start not in set(p.lhs for p in productions):
                raise Exception("Starting production is non-generating!")
            productions = Reachable(productions, self.start)

            # Add all of the productions to the grammar.
            for production in productions:
                self.addProduction(production.lhs, production.rhs)
\end{minted}
\label{exerpt:grammar}

\paragraph{} As you can see, on lines 19 and 22, there are grammar 
hygiene checks that are performed that remove non-generating and
non-reachable productions. Otherwise, a grammar is constructed from
the string parameter which points to a relative file location. Line 12
is the only location in which PyParsing is used in the project.

\section{Context Free Grammar Representation}
\label{sec:cfg_rep}
\paragraph{} We chose to stick with the representation given in the
project specification document. We found there were no changes need
to be made to successfully represent a grammar. For completeness, the
representation is below:

\begin{verbatim}
Grammar -> Grammar Production
Grammar -> 
Production -> symbol Arrow List
Arrow -> '->
List -> symbol List
List -> 
\end{verbatim}

\paragraph{} We note that a \verb_symbol_ in this context is any 
whitespace delimited string of printable ascii characters.

\section{Parser for CFG Representation}
\label{sec:parser}
Using PyParsing, the following is the representation for the representation
given in section~\ref{sec:cfg_rep}:

\begin{minted}[linenos=true]{python}
# pyparsing definitions for above-specified context-free grammar.
pyp_Arrow = Keyword("->").suppress()
pyp_Symbol = Word(alphanums)
pyp_List = ZeroOrMore(~LineStart().leaveWhitespace() + Word(printables))
pyp_Production = Group(pyp_Symbol.setResultsName("lhs") +
                       pyp_Arrow.suppress() +
                       Group(pyp_List).setResultsName("rhs"))
pyp_Grammar = ZeroOrMore(pyp_Production)
\end{minted}
\label{exerpt:parser}

\section{Grammar Hygiene Checks}
\label{sec:hygiene}
After reading in a grammar, certain hygiene checks must be made. We
must ensure that we can reach all non-terminals and we also must
ensure that we can generate a terminal string with every production.

\subsection{Generating}
We first check for non-generating productions as follows:

\begin{minted}[linenos=true]{python}
def Generating(productions):
    """
       ... comment excluded for brevity ... 
    """
    nonTerms = set(production.lhs for production in productions)
    productive = set()

    # Repeat until no new results are yielded.
    previousSize = -1
    while previousSize < len(productive):
        previousSize = len(productive)

        for production in productions:
            # Don't bother with productions that are already marked.
            if production.lhs not in productive:

                # Empty rhs is productive.
                if not production.rhs:
                    productive.add(production.lhs)

                # If every symbol in the RHS is productive, lhs is
                # productive.
                else:
                    isProductive = True
                    for symbol in production.rhs:
                        if symbol in nonTerms and symbol not in productive:
                            isProductive = False
                            break

                    if isProductive:
                        productive.add(production.lhs)

    # Build list of all productions with generating left-hand-sides,
    # but remove any that have non-generating variables in their
    # right-hand-side.
    unproductive = nonTerms - productive
    return [p for p in productions if
            p.lhs in productive
            and set(p.rhs).isdisjoint(unproductive)]
\end{minted}
\label{exerpt:generating}

\subsection{Unreachables}
We also remove any non-terminals that are unreachable and, consequently,
any productions including those unreachable non-terminals.

\begin{minted}[linenos=true]{python}
def Reachable(productions, start):
    """
       ... comment ommited for brevity ... 
    """
    nonTerms = set(production.lhs for production in productions)
    reachable = {start}
    marked = set(filter((lambda p: p.lhs == start), productions))
    unmarked = set(productions) - marked

    # Repeat until no new results are yielded.
    previousSize = -1
    while previousSize < len(reachable):
        previousSize = len(reachable)

        # Find all new reachable non-terminals in current marked set. Generate
        # a new marked set from all newly reachable non-terminals.
        nextMarked = set()
        for production in marked:
            for symbol in production.rhs:
                if symbol in nonTerms and symbol not in reachable:
                    nextMarked |= set(filter((lambda p: p.lhs == symbol), unmarked))
                    reachable.add(symbol)

        marked = nextMarked
        unmarked -= marked

    # Create new list of only reachable rules.
    return [p for p in productions if p.lhs in reachable]
\end{minted}

\section{Nullable, First and Follows}
To construct the LL1 parse table, we first must be able to compute
First and Follows. Both of those also use the set of all non-termianls
that are nullable. We'll start with nullable since it is the stand alone
computation.

\subsection{Nullable}
The set of all non-terminals that are nullable (can be removed through a series of productions ending with the null character) are:

\begin{minted}[linenos=true]{python}
def nullable(grammar):
    '''
       ...excluded for brevity...
    '''
    
    nullable = set()
    productions = grammar.productions

    cardinality = -1
    while cardinality < len(nullable):
        cardinality = len(nullable)

        for non_term in productions:
            #if epsilon is in the rhs already,
            #the production is nullable
            if [] in productions[non_term]:
                nullable.add(non_term)
            else:
                isNullable = False
                for N in productions[non_term]:
                    #check to see if this specific production is
                    # nullable by checking to see if the join set of
                    # all symbols in the production are nullable.
                    # If they are not, that production is not nullable
                    isProductionNullable = True
                    for symbol in N:
                        isProductionNullable &= symbol in nullable
                    # This is the disjoint set of all nullable
                    # productions the correspond to this lhs
                    isNullable |= isProductionNullable

                # if any of the disjoint productions are nullable, 
                # then this is true. Therefore, add this production's
                # lhs to the nullable set
                if isNullable:
                    nullable.add(non_term)
    return nullable
\end{minted}
\label{exerpt:nullable}

\subsection{First} Now, to compute the set of terminals that could be
the first terminals after a non-terminal is replaced with a
production, we calculate the closure as:

\begin{minted}[linenos=true]{python}

def first(grammar):
    '''
       excluded for brevity
    '''
    productions = grammar.productions
    #define the nullables
    nullable_non_terms = nullable(grammar)
    
    #initially set our table to the empty set of terminals
    prev_table = {non_term : set() for non_term in grammar.nonTerminals}
    #add just the productions of the form: 
    #   non_terminal -> terminal
    #to start the algorithm off
    for non_term in grammar.nonTerminals:
        for N in productions[non_term]:
            if [] == N: continue
            if N[0] not in grammar.nonTerminals:
                prev_table[non_term].add(N[0])

    has_changed = True

    while has_changed:
        has_changed = False
        #construct the new table so we don't interfere with the
        #previous one by adding things we wouldn't add this iteration
        new_table = prev_table.copy()

        for non_term in grammar.nonTerminals:
            for rhs in productions[non_term]:
                # if we have an epsilon, ignore it. It is the
                # equivalent of adding the empty set.
                if [] == rhs or rhs[0] not in grammar.nonTerminals:
                    continue

                first = rhs[0]
                # Now, we need to check to see if adding anything from
                # the first item in the rhs changes the current set of
                # terminals we have for this non_term

                # this is done by seeing if the rhs's first
                # non-terminal's first set can add anything to the
                # current set of terminals for non_term
                if len(prev_table[first] - prev_table[non_term]) > 0:
                    new_additions = prev_table[first] - prev_table[non_term]
                    #skip past all the nullables until we hit the end
                    #or we find a non-terminal. Add all the first sets
                    #for the next item in the production as we come
                    #across them
                    i = 1
                    while i+1 < len(rhs) and rhs[i] in nullable_non_terms:
                        if rhs[i + 1] in grammar.nonTerminals:
                            new_additions |= prev_table[rhs[i + 1]]
                        else:
                            #must list-ify to match the rest in the
                            #set
                            new_additions |= set([rhs[i+1]])
                            break
                        i += 1

                    new_table[non_term] |= new_additions
                    has_changed = True

        prev_table = new_table.copy()
    return prev_table
\end{minted}
\label{exerpt:first}

\subsection{Follows}
To finally wrap up the closures needed to compute the LL1 parse table, we
construct the set of terminals that follow any non-terminal by:

\begin{minted}[linenos=true]{python}
def follows(grammar):
    '''
       excluded for brevity
    '''
    nullable_non_terms = nullable(grammar)
    first_table = first(grammar)
    productions = grammar.productions

    #initalize the table to contain only the empty sets
    follow_table = {non_term : set() for non_term in grammar.nonTerminals}
    #add the EOF symbol for the start state
    #TODO: Correct symbol for eof? What should we do here?
    follow_table[grammar.start].add('$')

    has_changed = True
    #iterate until all sets have not changed
    while has_changed:
        has_changed = False

        #construct the new table for us to put additions into 
        new_table = follow_table.copy()
        
        #construct all the follow sets for every non-terminal
        for non_term in grammar.nonTerminals:
            #get the dictionary of all {lhs : 'beta' values} (lists of
            #expressions following the non-terminal)n
            betas_following_term = betas_following(non_term, productions)
            
            #Get the lhs of the production, call it M (like in the book)
            for M in betas_following_term.keys():
                #For every beta, calculate the following...
                for beta in betas_following_term[M]:
                    i = 0
                    while i < len(beta):
                        #iterating from the first to the last term in the list of
                        #symbols 
                        beta_term = beta[i]

                        # Case where beta is a non-terminal:
                        # Follows(non_term) = first(beta) U follows(non_term)
                        if beta_term in grammar.nonTerminals:
                            # if we see a value that's not in follows(non_term), add
                            # it and set the changed flag to True
                            if not first_table[beta_term] <= follow_table[non_term]:
                                has_changed = True
                                new_table[non_term] |= first_table[beta_term]
                        # Case where beta term is a terminal and we
                        # haven't seen it before add the non-terminal
                        # to the follows set and set the changed
                        # flag to True
                        elif beta_term not in follow_table[non_term]:
                            has_changed = True
                            new_table[non_term] |= set([beta_term])

                        # if the beta_term is not nullable, we are
                        # done with this list of symbols
                        if beta_term not in nullable_non_terms:
                            break

                        i += 1
                    
                    # case where all of the symbol list is nullable, in which
                    # we need to say follows(M) = follows(M) U follows(non_term)
                    if i == len(beta):
                        if not follow_table[M] <= follow_table[non_term]:
                            has_changed = True
                            new_table[M] |= follows_table[non_term]

        #update our table to point to the new one
        follow_table = new_table.copy()
    return follow_table
\end{minted}
\label{exerpt:follows}

Where the function \verb{betas_following_term{ can be found in the full code for ll1\_tools.py in section~\ref{code:ll1_tools}. With all three closures calculated, we can now construct the parse table (defined in the following section~\ref{sec:ll1}).

\section{LL1 Parse Table}
Constructing the Parse Table using the first, follows, and nullable definitions becomes a straigtforward calculation of three situations. With an intially empty table $T$, an end of file character, \#, and for each production of the form $A \rightarrow \alpha$:

\begin{align}
T\left[A,t\right] &= \alpha, \quad \text{where,  } t \in \text{First}\left(\alpha\right) \\
T\left[A,t\right] &= \alpha, \quad \text{where,  } \epsilon \in \text{First}\left(\alpha\right) \text{ and } t \in \text{Follows}\left(A\right) \\
T\left[A,\text{\#}\right] &= \alpha, \quad \text{where,  } \epsilon \in \text{First}\left(\alpha\right) \text{ and \# } \in \text{Follows}\left(A\right)
\end{align}
\label{sec:ll1}

We implemented the parse table as a separate class and is created by passing in a grammar into the class initializer. The table is built during the construction of the object and a flag is set inside the parse table if the grammar is ll1. The construction of the table is as follows:

\begin{minted}[linenos=true]{python}
class ParseTable:
    """ Represents a parse table. """

    def __init__(self, grammar):
        self.table = dict()
        self.isLl1 = True
        self.grammar = grammar

        first_dict = first(grammar)
        follows_dict = follows(grammar)
        nullables_set = nullable(grammar)

        # Initialize all table cells to the empty list.
        for nonTerminal in grammar.nonTerminals:
            self.table[nonTerminal] = dict()
            # also initialize the epsilon and eof characters
            # to have empty cells as well
            self.table[nonTerminal][EPSILON] = []
            self.table[nonTerminal][EOF] = []
            for terminal in grammar.terminals:
                self.table[nonTerminal][terminal] = []

        # Build the table.
        for lhs in grammar.productions:
            # All right hand sides of a production in the
            # form: A -> alpha1 | alpha2 | alpha3 as a list
            alphas = grammar.productions[lhs]

            # For every right hand side above
            for alpha in alphas:

                #calculate First(alpha) using first dictionary and nullables
                #this is First(alpha[0]) U First(alpha[i]) where i = 1 : len(alpha)
                #and stop i when alpha[i] is not in nullables
                first_of_alpha = create_first_from_list(first_dict, nullables_set, alpha)

                # for all 't' that exist in First(alpha), where 't' is always
                # a terminal
                for t in first_of_alpha:
                    #add this to the table for 't'
                    self.table[lhs][t].append(alpha)

                    # Check for multiple entries in cell - LL1 check.
                    if len(self.table[lhs][t]) > 1:
                        self.isLl1 = False

                # Now, if EPSILON exists in First(alpha), then we have a couple
                # other additions to make
                if EPSILON in first_of_alpha:
                    # For every terminal, t, in Follows(A), add an entry from [A][t] = alpha
                    for t in follows_dict[lhs]:
                        self.table[lhs][t].append(alpha)

                        # Check for multiple entries in cell - LL1 check.
                        if len(self.table[lhs][t]) > 1:
                            self.isLl1 = False

                    #Also, if EOF exists in Follows(A), then add entry: [A][EOF] = alpha
                    if EOF in follows_dict[lhs]:
                        self.table[lhs][EOF].append(alpha)
                        # Check for multiple entries in cell - LL1 check.
                        if len(self.table[lhs][EOF]) > 1:
                            self.isLl1 = False
\end{minted}

As you can see on lines 45, 56, and 64, if at any point, the table
entry is a list of length greater than 1 the grammar is not LL(1) and
we set the flag to false.

\subsection{LL(1) versus Strong LL(1)}
\paragraph{}We have tried to find the difference between Strong LL(1)
and LL(1) grammars in multiple references but there seems to be no
consesus what it means to be a Strong LL(1) grammar. We chose to
follow the definition in chapter 8 of the parsing book \emph{Parsing
  Techniques} by Grune and Jacobs. The definition given is: if your
language is LL(1) it is also Strong LL(1). This implies that if your
language is Strong LL(1), it is also LL(1), meaning there is no
difference between the two.

\paragraph{}We're not sure if there is a more formal definition
 somewhere, but we took a definition out of a recent textbook to be
 formal enough.

\section{Parser Construction}
\label{sec:parser}
\paragraph{}Regardless of whether or not a grammar is LL(1) or not,
we still construct a parser for the grammar. However, if at any point
the parser identifies the possibility of having two different parses
by having more than one entry in the parse table, it fails fast by
raising an error. The parser builds a Rose Tree as it consumes input
where the children of any particular node are the sequence of tokens
put on the parse stack (identified by the parse table).

\paragraph{}The parser and LL(1) parse method are as follows:

\begin{minted}[linenos=true]{python}
class Parser:

    def __init__(self, grammar=None):
        #storing this just in case
        self.grammar = grammar
        #start the stack with just the start node
        self.parse_stack = [grammar.start]
        #construct the parse table
        self.table = ParseTable(grammar).table

    def ll1_parse(self, rose_tree, token_list):
        ''' excluded for brevity '''

        # if the stack is empty, return the current parse and leftover input
        if not self.parse_stack:
            return rose_tree, token_list

        # if there's no tokens left and we are here, parse error
        if not token_list:
            raise ValueError("Unexpected EOF, current parse stack is:" + str(self.parse_stack.reverse()))

        # Get the first symbol
        current_symbol = self.parse_stack.pop()
        # one token look-ahead
        token = token_list[0]

        #if we have a matching symbol and token, we can consume the input
        if current_symbol in self.grammar.terminals:
            leaf = Rose_Tree(current_symbol, token)
            return leaf, token_list[1:]

        #else we have a non-terminal, we must continue with the rewrite
        #returns a list of possible productions that should follow
        production_to_follow = self.table[current_symbol][token]

        # if empty production to follow, unexpected terminal found:
        if not production_to_follow:
            raise ValueError("Unexpected terminal, " + str(token) + ", found.")

        # we can't handle this in LL1 style parsing
        if len(production_to_follow) > 1:

            print production_to_follow
            raise ValueError("Too many possible parses for LL1, this is non-deterministic. "
                             "Please check your grammar. Current parse: " +
                             str(self.parse_stack[0:-1]) + " on terminal " + str(token))

        # push all symbols onto the stack
        for symbol in production_to_follow[0]:
            self.parse_stack.append(symbol)


        #construct a node in the tree and attach all children parsed
        current_rose_tree_node = Rose_Tree(current_symbol, "")

        leftover = token_list
        for symbol in production_to_follow[0]:
            #this can never just return from an empty stack since we place
            #all symbols found on the stack before this. See lines 54 & 55
            parsed_tree_node, leftover = self.ll1_parse(current_rose_tree_node, leftover)

            # append as a child
            current_rose_tree_node.children.append(parsed_tree_node)

            # point back to parent
            parsed_tree_node.parent = current_rose_tree_node

        #finished parsing for this node completely, return the node and any leftover input
        return current_rose_tree_node, leftover
\end{minted}

\section{Team Composition}
Work on this project was divided into four main parts: Reading and cleaning grammars, algorithms for LL1 languages, parsetable construction/parsing, and writing the report.

Reading and cleaning grammars was primarily worked on by Zach, with bug-fixes and modifications by Taylor. As the program evolved, necessary changes to these utilities were made apparent and a group effort was made to modify this section.

Work on the LL1 algorithms and tools were discussed and planned by the whole group. The final implementation is mostly the product of Taylor's hard work. Collective group effort was involved in late changes to this code.

The third section was initially drafted via pair (triplet?)-programming between Taylor, Justin, and Zach. Evolution of this code to the final product was mostly effected by Taylor with assistance from Zach via a Google Hangout, pair-programming session.

Finally, the report was written almost entirely by Taylor.
\section{Full Code}
\label{code}

\subsection{cfg.py}
\label{code:cfg}
\inputminted{python}{./cfg.py}
\newpage

\subsection{ll1\_tools.py}
\label{code:ll1_tools}
\inputminted{python}{./ll1_tools.py}
\newpage

\subsection{parsetable.py}
\label{code:parsetable}
\inputminted{python}{./parsetable.py}
\newpage

\subsection{parser.py}
\label{code:parser}
\inputminted{python}{./parser.py}
\end{document}
